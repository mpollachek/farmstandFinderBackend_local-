#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('farmstandfinder-backend:server');
var http = require('http');
var https = require('https');
var privateKey  = fs.readFileSync('/etc/letsencrypt/live/allfarmstands.com/privkey.pem'); //Certbot
var certificate = fs.readFileSync('/etc/letsencrypt/ssl-dhparams.pem'); //Certbot

var credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);
app.set('secPort', 8443);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app)

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

httpsServer.listen(secPort);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function normalizeHttpsPort(val) {
  var secPort = parseInt(val, 10);

  if (isNaN(secPort)) {
    // named pipe
    return val;
  }

  if (secPort >= 0) {
    // port number
    return secPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

    var httpsBind = typeof secPort === 'string'
    ? 'Pipe ' + secPort
    : 'Port ' + secPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

switch (error.code) {
  case 'EACCES':
    console.error(httpsBind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(httpsBind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var httpAddr = httpServer.address();
  var bind = typeof httpAddr === 'string'
    ? 'pipe ' + httpAddr
    : 'port ' + httpAddr.port;
  debug('Listening on ' + bind);
  console.log(`connected to port: ${port}`);
}

function onListening() {
  var httpsAddr = httpsServer.address();
  var bind = typeof httpsAddr === 'string'
    ? 'pipe ' + httpsAddr
    : 'secPort ' + httpsAddr.secPort;
  debug('Listening on ' + bind);
  console.log(`connected to port: ${secPort}`);
}


